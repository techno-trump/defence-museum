(function() {
    "use strict";
    !function() {
        function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        }
        function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }
        function _iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
        }
        function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return _arrayLikeToArray(arr);
        }
        function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
            return arr2;
        }
        var throttle = function throttle(callback, delay) {
            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            var argsMemo, timeOut = null;
            return function() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                if (timeOut) argsMemo = args; else {
                    if (options.noLeadingCall) argsMemo = args; else callback.apply(void 0, args);
                    schedule();
                }
                function schedule() {
                    timeOut = setTimeout((function() {
                        if (argsMemo) {
                            callback.apply(void 0, _toConsumableArray(argsMemo));
                            argsMemo = null;
                        }
                        timeOut = null;
                    }), delay);
                }
            };
        };
        function initRangeInputCustomStyle() {
            var elements = document.querySelectorAll("input[type='range']");
            var recalcProgress = throttle((function(elem) {
                var minValue = +elem.getAttribute("min");
                var maxValue = +elem.getAttribute("max");
                var currentValue = elem.value;
                var progress = (currentValue - minValue) / (maxValue - minValue) * 100;
                elem.style.setProperty("--progress", "".concat(progress, "%"));
            }), 25);
            var inputHandler = function inputHandler(event) {
                recalcProgress(event.currentTarget);
            };
            elements.forEach((function(elem) {
                elem.addEventListener("input", inputHandler);
                recalcProgress(elem);
            }));
        }
        var onlyErrorsToConsole = false;
        var consoleLogs = true;
        var alertOnLog = false;
        function log() {
            if (!onlyErrorsToConsole) {
                var _console;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                if (consoleLogs) (_console = console).log.apply(_console, args);
                if (alertOnLog) alert(args.join(" :: "));
            }
        }
        function getTargetElem(target) {
            if (target instanceof HTMLElement) return target; else {
                var elem = document.querySelector(target);
                if (!elem) new Error("Cannot find the target by selector: ".concat(target));
                return elem;
            }
        }
        var debounce = function debounce(callback, delay) {
            var timeOut = null;
            return function() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                if (timeOut) {
                    clearTimeout(timeOut);
                    timeOut = null;
                }
                timeOut = setTimeout((function() {
                    timeOut = null;
                    callback.apply(void 0, args);
                }), delay);
            };
        };
        var isMobile = {
            Android: function Android() {
                return navigator.userAgent.match(/Android/i);
            },
            BlackBerry: function BlackBerry() {
                return navigator.userAgent.match(/BlackBerry/i);
            },
            iOS: function iOS() {
                return navigator.userAgent.match(/iPhone|iPad|iPod/i);
            },
            Opera: function Opera() {
                return navigator.userAgent.match(/Opera Mini/i);
            },
            Windows: function Windows() {
                return navigator.userAgent.match(/IEMobile/i);
            },
            any: function any() {
                return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();
            }
        };
        function _typeof(obj) {
            "@babel/helpers - typeof";
            return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            }, _typeof(obj);
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            Object.defineProperty(Constructor, "prototype", {
                writable: false
            });
            return Constructor;
        }
        function _toPropertyKey(arg) {
            var key = _toPrimitive(arg, "string");
            return _typeof(key) === "symbol" ? key : String(key);
        }
        function _toPrimitive(input, hint) {
            if (_typeof(input) !== "object" || input === null) return input;
            var prim = input[Symbol.toPrimitive];
            if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (_typeof(res) !== "object") return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return (hint === "string" ? String : Number)(input);
        }
        var EventEmitter = function() {
            function EventEmitter() {
                _classCallCheck(this, EventEmitter);
                this.__subscribers = {};
            }
            _createClass(EventEmitter, [ {
                key: "on",
                value: function on(name, callback) {
                    if (!(name in this.__subscribers)) this.__subscribers[name] = [];
                    this.__subscribers[name].push(callback);
                }
            }, {
                key: "off",
                value: function off(name, callback) {
                    if (name in this.__subscribers) this.__subscribers[name] = this.__subscribers[name].filter((function(registeredCallback) {
                        return registeredCallback === callback;
                    }));
                }
            }, {
                key: "emit",
                value: function emit(name, payload) {
                    if (name in this.__subscribers) this.__subscribers[name].forEach((function(callback) {
                        return callback(payload);
                    }));
                }
            } ]);
            return EventEmitter;
        }();
        function audio_player_typeof(obj) {
            "@babel/helpers - typeof";
            return audio_player_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            }, audio_player_typeof(obj);
        }
        function audio_player_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function audio_player_defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, audio_player_toPropertyKey(descriptor.key), descriptor);
            }
        }
        function audio_player_createClass(Constructor, protoProps, staticProps) {
            if (protoProps) audio_player_defineProperties(Constructor.prototype, protoProps);
            if (staticProps) audio_player_defineProperties(Constructor, staticProps);
            Object.defineProperty(Constructor, "prototype", {
                writable: false
            });
            return Constructor;
        }
        function audio_player_toPropertyKey(arg) {
            var key = audio_player_toPrimitive(arg, "string");
            return audio_player_typeof(key) === "symbol" ? key : String(key);
        }
        function audio_player_toPrimitive(input, hint) {
            if (audio_player_typeof(input) !== "object" || input === null) return input;
            var prim = input[Symbol.toPrimitive];
            if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (audio_player_typeof(res) !== "object") return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return (hint === "string" ? String : Number)(input);
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            Object.defineProperty(subClass, "prototype", {
                writable: false
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }
        function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();
            return function _createSuperInternal() {
                var result, Super = _getPrototypeOf(Derived);
                if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                } else result = Super.apply(this, arguments);
                return _possibleConstructorReturn(this, result);
            };
        }
        function _possibleConstructorReturn(self, call) {
            if (call && (audio_player_typeof(call) === "object" || typeof call === "function")) return call; else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
            return _assertThisInitialized(self);
        }
        function _assertThisInitialized(self) {
            if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return self;
        }
        function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;
            try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
                return true;
            } catch (e) {
                return false;
            }
        }
        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }
        var mobileMode = isMobile.any();
        var rootClassName = "audio-player";
        var trackListRootClassName = "audio-player-track-list";
        var activeTrackClassName = "".concat(trackListRootClassName, "__item_active");
        log("mobileMode::", mobileMode);
        function PlayerTrackList(target, player) {
            var _this = this;
            this.rootElem = getTargetElem(target);
            this.currentTrackIdx = null;
            this.player = player;
            this.listTemplate = '{{#tracks}}\n\t\t\t\t\t\t\t\t\t\t\t\t<li class="audio-player-track-list__item hoverable" data-track-id="{{trackId}}">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{name}}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t{{/tracks}}';
            Mustache.parse(this.listTemplate);
            var trackClickHandler = throttle((function(event) {
                var trackRootElem = event.target.hasAttribute("data-track-id") ? event.target : event.target.closest("".concat(trackListRootClassName, "__item"));
                if (!trackRootElem) return;
                var trackId = trackRootElem.getAttribute("data-track-id");
                log("TrackID:: ", trackId);
                if (_this.selectTrackById(trackId)) if (mobileMode || event.type === "dblclick") _this.playSelectedTrack();
            }), 100);
            this.rootElem.addEventListener("click", trackClickHandler);
            this.rootElem.addEventListener("dblclick", trackClickHandler);
            this.player.on("toNextTrack", (function() {
                return _this.nextTrack();
            }));
            this.player.on("toPrevTrack", (function() {
                return _this.prevTrack();
            }));
            this.player.on("ended", (function() {
                return _this.playNextTrack();
            }));
        }
        (function(proto) {
            proto.loadTracks = function(tracks) {
                this.originalTracks = tracks;
                this.sortedTracks = this.originalTracks.slice(0);
                this.render(this.sortedTracks);
                this.nextTrack();
            };
            proto.render = function(tracks) {
                this.rootElem.innerHTML = Mustache.render(this.listTemplate, {
                    tracks: tracks
                });
            };
            proto.nextTrack = function() {
                var nextTrackIdx = this.getNextTrackIdx();
                log("nextTrack::nextTrackIdx ", nextTrackIdx);
                if (!this.player.playerElem.paused) {
                    this.player.pause();
                    if (this.selectTrackByIdx(nextTrackIdx)) this.player.play();
                } else this.selectTrackByIdx(nextTrackIdx);
            };
            proto.prevTrack = function() {
                var prevTrackIdx = this.getPrevTrackIdx();
                log("prevTrack::prevTrackIdx ", prevTrackIdx);
                if (!this.player.playerElem.paused) {
                    this.player.pause();
                    if (this.selectTrackByIdx(prevTrackIdx)) this.player.play();
                } else this.selectTrackByIdx(prevTrackIdx);
            };
            proto.playNextTrack = function() {
                var nextTrackIdx = this.getNextTrackIdx();
                log("nextTrack::playNextTrack ", nextTrackIdx);
                if (nextTrackIdx === this.currentTrackIdx) {
                    this.player.playerElem.currentTime = 0;
                    this.player.playerElem.load();
                } else {
                    if (!this.player.playerElem.paused) this.player.pause();
                    if (this.selectTrackByIdx(nextTrackIdx)) this.player.play();
                }
            };
            proto.playPrevTrack = function() {};
            proto.selectTrackById = function(trackId) {
                var trackIdx = this.sortedTracks.findIndex((function(track) {
                    return track.trackId === trackId;
                }));
                return this.selectTrackByIdx(trackIdx);
            };
            proto.selectTrackByIdx = function(trackIdx) {
                if (!~trackIdx) return false;
                if (this.currentTrackIdx === trackIdx) return true;
                if (!this.player.playerElem.paused) this.player.pause();
                var trackElem = this.rootElem.children[this.currentTrackIdx];
                if (trackElem instanceof HTMLElement) trackElem.classList.remove(activeTrackClassName);
                this.currentTrackIdx = trackIdx;
                trackElem = this.rootElem.children[trackIdx];
                if (trackElem instanceof HTMLElement) trackElem.classList.add(activeTrackClassName);
                this.player.loadTrack(this.sortedTracks[trackIdx]);
                return true;
            };
            proto.getNextTrackIdx = function() {
                var nextTrackIdx = this.currentTrackIdx === null || this.currentTrackIdx < 0 ? 0 : this.currentTrackIdx + 1;
                return nextTrackIdx >= this.sortedTracks.length ? this.sortedTracks.length - 1 : nextTrackIdx;
            };
            proto.getPrevTrackIdx = function() {
                var prevTrackIdx = this.currentTrackIdx === null || this.currentTrackIdx < 1 ? 0 : this.currentTrackIdx - 1;
                return prevTrackIdx >= this.sortedTracks.length ? this.sortedTracks.length - 1 : prevTrackIdx;
            };
            proto.playSelectedTrack = function() {
                log("playSelectedTrack");
                this.player.play();
            };
        })(PlayerTrackList.prototype);
        var AudioPlayer = function(_EventEmitter) {
            _inherits(AudioPlayer, _EventEmitter);
            var _super = _createSuper(AudioPlayer);
            function AudioPlayer(target) {
                var _this2;
                audio_player_classCallCheck(this, AudioPlayer);
                _this2 = _super.call(this);
                _this2.rootElem = getTargetElem(target);
                _this2.playerElem = _this2.rootElem.querySelector("audio");
                _this2.sourceElem = _this2.rootElem.querySelector(".".concat(rootClassName, "__source"));
                _this2.currentTrackImgElem = _this2.rootElem.querySelector(".".concat(rootClassName, "__img > img"));
                _this2.currentTrackNameElem = _this2.rootElem.querySelector(".".concat(rootClassName, "__track-name"));
                _this2.currentTrack = {};
                _this2.controlElems = {
                    volume: _this2.rootElem.querySelector(".".concat(rootClassName, "__volume-control")),
                    progress: _this2.rootElem.querySelector(".".concat(rootClassName, "__progress-control")),
                    prevTrack: _this2.rootElem.querySelector(".".concat(rootClassName, "__prev-track-btn")),
                    nextTrack: _this2.rootElem.querySelector(".".concat(rootClassName, "__next-track-btn")),
                    play: _this2.rootElem.querySelector(".".concat(rootClassName, "__play-btn")),
                    pause: _this2.rootElem.querySelector(".".concat(rootClassName, "__pause-btn")),
                    progressTimer: _this2.rootElem.querySelector(".".concat(rootClassName, "__progress-timer"))
                };
                _this2.controlElems.volume.value = _this2.playerElem.volume * 100;
                _this2.controlElems.volume.dispatchEvent(new Event("input"));
                _this2.controlElems.volume.addEventListener("input", (function() {
                    _this2.playerElem.volume = _this2.controlElems.volume.value / 100;
                }));
                _this2.controlElems.play.addEventListener("click", (function() {
                    _this2.play();
                }));
                _this2.controlElems.pause.addEventListener("click", (function() {
                    _this2.pause();
                }));
                _this2.controlElems.prevTrack.addEventListener("click", (function() {
                    _this2.emit("toPrevTrack");
                }));
                _this2.controlElems.nextTrack.addEventListener("click", (function() {
                    _this2.emit("toNextTrack");
                }));
                _this2.playerElem.addEventListener("timeupdate", (function() {
                    if (_this2.playerElem.paused || _this2.seeking || isNaN(_this2.playerElem.duration)) return;
                    _this2.controlElems.progressTimer.textContent = formatSeconds(_this2.playerElem.currentTime);
                    _this2.controlElems.progress.value = _this2.playerElem.currentTime / _this2.playerElem.duration * 100;
                    var event = new Event("input");
                    event.__timeupdate = true;
                    _this2.controlElems.progress.dispatchEvent(event);
                }));
                _this2.playerElem.addEventListener("ended", (function() {
                    _this2.emit("ended");
                }));
                var debouncedSeeking = debounce((function() {
                    _this2.playerElem.currentTime = _this2.playerElem.duration * _this2.controlElems.progress.value / 100;
                    _this2.play();
                }), 100);
                _this2.controlElems.progress.addEventListener("input", (function(event) {
                    if (event.__timeupdate || isNaN(_this2.playerElem.duration)) return;
                    log(" Seek control :: input");
                    if (!_this2.paused) _this2.pause();
                    debouncedSeeking();
                }));
                return _this2;
            }
            audio_player_createClass(AudioPlayer, [ {
                key: "play",
                value: function play(track) {
                    log("play:: ", this.playerElem.src, this.playerElem.readyState);
                    if (track !== void 0) this.loadTrack(track);
                    if (this.playerElem.src) this.playerElem.play();
                }
            }, {
                key: "loadTrack",
                value: function loadTrack(track) {
                    this.currentTrackImgElem.src = track.imgUrl;
                    this.currentTrackNameElem.textContent = track.name;
                    this.playerElem.src = track.fileUrl;
                    this.sourceElem.src = track.fileUrl;
                    this.playerElem.load();
                }
            }, {
                key: "pause",
                value: function pause() {
                    if (this.playerElem.played) this.playerElem.pause();
                }
            } ]);
            return AudioPlayer;
        }(EventEmitter);
        function formatSeconds(sec) {
            var hours = sec / 3600 ^ 0;
            var minutes = sec % 3600 / 60 ^ 0;
            var seconds = sec % 3600 % 60 ^ 0;
            var withoutHours = "".concat(formatTimePart(minutes), ":").concat(formatTimePart(seconds));
            return hours > 0 ? "".concat(formatTimePart(hours), ":").concat(withoutHours) : withoutHours;
        }
        function formatTimePart(value) {
            return value < 10 ? "0".concat(value) : value;
        }
        var tracks = [ {
            name: "Track 1",
            trackId: "1",
            imgUrl: "img/static/archive/track-img.jpg",
            imgThumbUrl: "img/static/archive/track-img-thumb.jpg",
            fileUrl: "media/anivar_-_zachem-bez-lyubvi.mp3"
        }, {
            name: "Track 2",
            trackId: "2",
            imgUrl: "img/static/archive/track-img.jpg",
            imgThumbUrl: "img/static/archive/track-img-thumb.jpg",
            fileUrl: "media/anivar_-_zachem-bez-lyubvi.mp3"
        }, {
            name: "Track 3",
            trackId: "3",
            imgUrl: "img/static/archive/track-img.jpg",
            imgThumbUrl: "img/static/archive/track-img-thumb.jpg",
            fileUrl: "media/anivar_-_zachem-bez-lyubvi.mp3"
        } ];
        window.addEventListener("DOMContentLoaded", onLoaded);
        function onLoaded() {
            initRangeInputCustomStyle();
            var player = new AudioPlayer("#main-audio-player");
            var trackList = new PlayerTrackList("#main-player-track-list", player);
            trackList.loadTracks(tracks);
            var trackIdToSelect = new URL(location.href).searchParams.get("track-id");
            if (trackIdToSelect !== null) trackList.selectTrackById(trackIdToSelect);
        }
    }();
    !function() {}();
})();